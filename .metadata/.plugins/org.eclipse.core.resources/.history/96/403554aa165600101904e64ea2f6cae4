package com.flow.coretime.controller;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.flow.coretime.model.User;
import com.flow.coretime.service.UserService;

import jakarta.validation.Valid;

@Controller
@RequestMapping("/users")
public class UserController {
	
	private final UserService userService;
	
	public UserController(UserService userService) {
		this.userService= userService;
	}
	
	@GetMapping
	public String showUserPage(Model model) {
        return "userPage";
	}
	
	@GetMapping("/list")
	public String showUserList(Model model) {
		List<User> userList = userService.findAllUsers(); // 서비스에서 모든 사용자 가져오기
        model.addAttribute("userList", userList); // 모델에 리스트 추가
        return "userList";
	}
	
	@GetMapping("/new")
	public String showUserForm(Model model) {
		model.addAttribute("user", new User());
		return "userForm";
	}

	@PostMapping("/insert")
	public String insertUser(@Valid User user, BindingResult bindingResult, Model model) {
//		if (bindingResult.hasErrors()) {
//            System.out.println("Validation errors: " + bindingResult.getAllErrors());
//			return "userForm";
//		}
//		
//		userService.insertUser(user);
//		return "redirect:/users";
		
		// (1) @Valid 어노테이션에 의한 기본 유효성 검사 (예: @NotBlank)
				if (bindingResult.hasErrors()) {
		            System.out.println("Validation errors: " + bindingResult.getAllErrors());
					return "userForm";
				}
				
				try {
					// (2) 서비스 계층에서 아이디 중복 확인 및 삽입 시도
					userService.insertUser(user);
				} catch (UserAlreadyExistsException e) {
					// (3) 아이디 중복 예외 발생 시 BindingResult에 오류 추가
					bindingResult.addError(new FieldError("user", "id", user.getId(), false, null, null, e.getMessage()));
					// 모델에 user 객체를 다시 추가 (선택 사항이지만, 폼 데이터를 유지하는 데 도움)
					model.addAttribute("user", user); 
					return "userForm"; // 에러 메시지와 함께 폼으로 다시 돌아감
				} catch (Exception e) {
		            // 그 외 예상치 못한 다른 DB 오류가 발생할 경우를 대비한 일반적인 예외 처리
		            // 예를 들어, model에 일반 에러 메시지를 추가하고 에러 페이지로 리다이렉트
		            model.addAttribute("errorMessage", "사용자 등록 중 알 수 없는 오류가 발생했습니다.");
		            return "errorPage"; // 또는 "userForm"으로 메시지와 함께 돌아갈 수도 있습니다.
		        }

				return "redirect:/users"; // 등록 성공 후 리다이렉트
			}
	}
}
