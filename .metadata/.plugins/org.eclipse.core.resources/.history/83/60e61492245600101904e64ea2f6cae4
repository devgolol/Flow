package com.flow.coretime.controller;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.flow.coretime.exception.UserAlreadyExistsException;
import com.flow.coretime.model.User;
import com.flow.coretime.service.UserService;

import jakarta.validation.Valid;

@Controller
@RequestMapping("/users")
public class UserController {
	
	private final UserService userService;
	
	public UserController(UserService userService) {
		this.userService= userService;
	}
	
	@GetMapping
	public String showUserPage(Model model) {
        return "userPage";
	}
	
	@GetMapping("/list")
	public String showUserList(Model model) {
		List<User> userList = userService.findAllUsers(); // 서비스에서 모든 사용자 가져오기
        model.addAttribute("userList", userList); // 모델에 리스트 추가
        return "userList";
	}
	
	@GetMapping("/new")
	public String showUserForm(Model model) {
		model.addAttribute("user", new User());
		return "userForm";
	}

	@PostMapping("/insert")
	public String insertUser(@Valid @ModelAttribute User user, BindingResult bindingResult, Model model) {
		if (bindingResult.hasErrors()) {
            System.out.println("Validation errors: " + bindingResult.getAllErrors());
			return "userForm"; // 유효성 검사 실패 시 폼으로 다시 돌아감
		}
		
		try {
			// (2) 서비스 계층의 비즈니스 로직 호출
			userService.insertUser(user);
		} catch (UserAlreadyExistsException e) { // <<< 서비스 계층이 던진 비즈니스 예외를 명확하게 캐치
			// 아이디 필드에 대한 오류로 BindingResult에 추가합니다.
			bindingResult.addError(new FieldError("user", "id", user.getId(), false, null, null, e.getMessage()));
			model.addAttribute("user", user); // 기존 폼 데이터를 유지
			return "userForm"; // 에러 메시지와 함께 폼으로 다시 돌아감
		} catch (Exception e) {
            // 그 외 예상치 못한 일반 예외 처리
            System.err.println("Unhandled Exception during user insertion: " + e.getMessage());
            model.addAttribute("errorMessage", "사용자 등록 중 알 수 없는 오류가 발생했습니다.");
            model.addAttribute("user", user); // 기존 폼 데이터를 유지
            return "userForm"; 
        }
		
		// 성공적으로 처리되었을 경우 리다이렉트
		return "redirect:/users";
	}

	}

