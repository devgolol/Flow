package com.flow.coretime.service;

import java.time.LocalDate;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.flow.coretime.mapper.UserMapper;
import com.flow.coretime.model.User;

@Service
public class UserService implements UserDetailsService{
	
	private final UserMapper userMapper;
	private final PasswordEncoder passwordEncoder;
	
	public UserService(UserMapper userMapper, PasswordEncoder passwordEncoder)
	{
		this.userMapper= userMapper;
		this.passwordEncoder = passwordEncoder; 
	}

	public void insertUser(User user) {
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		user.setCreatedAt(LocalDate.now());
		user.setUpdatedAt(LocalDate.now());
		user.setRoles("ROLE_USER");
		userMapper.insertUser(user);
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User user = userMapper.findByUsername(username);

        if (user == null) {
            throw new UsernameNotFoundException("User not found: " + username);
        }

        // DB에서 가져온 권한 문자열 리스트를 Spring Security의 GrantedAuthority 객체로 변환
        List<GrantedAuthority> authorities = user.getAuthorities().stream()
                .map(authority -> new SimpleGrantedAuthority(authority.getAuthority())) // Authority 객체에서 권한 문자열 가져옴
                .collect(Collectors.toList());

        // Spring Security의 User 객체를 생성하여 반환
        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(), // 암호화된 비밀번호
                user.isEnabled(),    // 계정 활성화 여부
                true, // accountNonExpired
                true, // credentialsNonExpired
                true, // accountNonLocked
                authorities // 사용자 권한
        );
	}
	
	
}
