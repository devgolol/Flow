package com.flow.coretime.service;

import java.time.LocalDate;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.flow.coretime.mapper.UserMapper;
import com.flow.coretime.model.User;

@Service
public class UserService implements UserDetailsService{
	
	private final UserMapper userMapper;
	private final PasswordEncoder passwordEncoder;
	
	public UserService(UserMapper userMapper, PasswordEncoder passwordEncoder)
	{
		this.userMapper= userMapper;
		this.passwordEncoder = passwordEncoder; 
	}

	public void insertUser(User user) {
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		user.setCreatedAt(LocalDate.now());
		user.setUpdatedAt(LocalDate.now());
		user.setRoles("ROLE_USER");
		userMapper.insertUser(user);
	}

	@Override
	public UserDetails loadUserByUsername(String id) throws UsernameNotFoundException {
		User user = userMapper.findById(id);
		
		List<GrantedAuthority> authorities = Arrays.stream(user.getRoles().split(","))
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());

// Spring Security의 UserDetails 객체를 생성하여 반환합니다.
return new org.springframework.security.core.userdetails.User(
user.getId(),           // 사용자 아이디 (로그인에 사용될 식별자)
user.getPassword(),     // 암호화된 비밀번호 (DB에서 가져온 그대로)
authorities             // 사용자 권한 목록
);

       
	}
	
	
}
