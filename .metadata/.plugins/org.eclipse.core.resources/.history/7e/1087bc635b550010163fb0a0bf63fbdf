package com.flow.coretime.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {
	
	@Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http
		.authorizeHttpRequests(authorize -> authorize
				.requestMatchers("/login", "/", "/doLogin").permitAll() // /doLogin도 명시적으로 허용
				.anyRequest().authenticated() // <<< 이 부분 다시 활성화! (가장 중요)
		)
		.formLogin(formLogin -> formLogin
				.loginPage("/login")
			    .loginProcessingUrl("/doLogin")
			    .usernameParameter("username") // 기본값과 동일하지만 명시하는 것이 좋습니다.
			    .passwordParameter("password") // 기본값과 동일하지만 명시하는 것이 좋습니다.
			    .defaultSuccessUrl("/home", true) // <<< 로그인 성공 시 /home으로 리다이렉션 (가장 중요)
			    .failureUrl("/login?error=true") // 로그인 실패 시 /login으로 에러와 함께 리다이렉션
			    .permitAll() // formLogin 관련 URL들도 모두 허용
		)
		.logout(logout -> logout
				.logoutUrl("/logout")
				.logoutSuccessUrl("/login") // 로그아웃 성공 시 로그인 페이지로 이동
				.permitAll() // 로그아웃 관련 URL들도 모두 허용
		);

		return http.build();
	}
}
