package com.flow.coretime.controller;

import java.util.List;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.flow.coretime.model.User;
import com.flow.coretime.service.UserService;

import jakarta.validation.Valid;

@Controller
@RequestMapping("/users")
public class UserController {
	
	private final UserService userService;
	
	public UserController(UserService userService) {
		this.userService= userService;
	}
	
	@GetMapping
	public String showUserPage(Model model) {
        return "userPage";
	}
	
	@GetMapping("/list")
	public String showUserList(Model model) {
		List<User> userList = userService.findAllUsers(); // 서비스에서 모든 사용자 가져오기
        model.addAttribute("userList", userList); // 모델에 리스트 추가
        return "userList";
	}
	
	@GetMapping("/new")
	public String showUserForm(Model model) {
		model.addAttribute("user", new User());
		return "userForm";
	}

	@PostMapping("/insert")
	public String insertUser(@Valid @ModelAttribute User user, BindingResult bindingResult, Model model) {
//		if (bindingResult.hasErrors()) {
//            System.out.println("Validation errors: " + bindingResult.getAllErrors());
//			return "userForm";
//		}
//		
//		userService.insertUser(user);
//		return "redirect:/users";
		// (1) @Valid 어노테이션에 의한 기본 유효성 검사 (예: @NotBlank)
				if (bindingResult.hasErrors()) {
		            System.out.println("Validation errors: " + bindingResult.getAllErrors());
					return "userForm"; // 유효성 검사 실패 시 폼으로 다시 돌아감
				}
				
				try {
					userService.insertUser(user);
				} catch (DataIntegrityViolationException e) { // 아이디 중복 등 DB 제약 조건 위반 예외
		            System.err.println("DataIntegrityViolationException during user insertion: " + e.getMessage());
		            
		            // ORA-00001 (Unique Constraint Violation)이고, 제약 조건 이름이 "UK_USERS_ID"인지 확인
		            // 이 조건은 Oracle DB와 UK_USERS_ID 제약 조건 이름을 가정합니다.
		            if (e.getMostSpecificCause().getMessage().contains("ORA-00001") && 
		                e.getMostSpecificCause().getMessage().contains("UK_USERS_ID")) {
		                
		                model.addAttribute("idErrorMessage", "이미 사용 중인 아이디입니다."); // JSP에서 읽을 메시지
		                model.addAttribute("idError", true); // JSP에서 에러 표시를 위한 플래그
		            } else {
		                // 다른 DataIntegrityViolationException 종류 (예: NOT NULL 위배 등)
		                model.addAttribute("errorMessage", "데이터베이스 오류가 발생했습니다.");
		            }
		            // 기존 폼 데이터 유지를 위해 user 객체를 모델에 다시 추가
		            model.addAttribute("user", user); 
		            return "userForm"; // 에러 메시지와 함께 폼으로 다시 돌아감
		        } catch (Exception e) {
		            // 그 외 예상치 못한 다른 종류의 일반 예외 처리
		            System.err.println("Unhandled Exception during user insertion: " + e.getMessage());
		            model.addAttribute("errorMessage", "사용자 등록 중 알 수 없는 오류가 발생했습니다.");
		            // 기존 폼 데이터 유지를 위해 user 객체를 모델에 다시 추가
		            model.addAttribute("user", user); 
		            return "userForm"; // 일반 에러 메시지와 함께 폼으로 돌아감
		        }
				
				// 성공적으로 처리되었을 경우 리다이렉트
				return "redirect:/users"; // 성공 시에는 userForm으로 다시 가는 대신 리스트 페이지 등으로 리다이렉트하는 것이 일반적입니다.
			}

	}
		
}

